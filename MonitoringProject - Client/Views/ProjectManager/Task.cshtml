@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "DashboardLayout";
}
   <h1> Task List</h1>
    <a asp-controller="ProjectManager" asp-action="Module" class="btn btn-lg btn-primary float-right rounded-circle" data-placement="top" title="Back to Module"><i class="fa fa-arrow-left"></i></a>
    <div>
        <button type="button" class="btn btn-dark" id="btnAddTask" style="margin: auto" data-toggle="modal" data-target="#modalAddTask" data-placement="top" title="Add Project Task" onclick=""><i class="fa fa-plus" aria-hidden="true"></i></button>
        <button class="popup btn btn-success" data-toggle="tooltip" data-placement="top" title="Mark Module Finished" id="btnDone" onclick="Done()"><i class="fa fa-check"></i></button>
    </div>

<div class="p-3">
    <table id="tbl_project_task" class="display">
        <thead>
            <tr>
                <th>No</th>
                <th>Task Name</th>
                <th>Start Date</th>
                <th>Deadline</th>
                <th>Status</th>
                <th>Priority</th>
                <th>Action</th>
            </tr>
        </thead>
    </table>
</div>

<div id="TaskChart"></div>

@*modal add task*@
<div class="modal" id="modalAddTask">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <h2 class="modal-title">Add Project Task</h2>
            </div>
            <!-- Modal body -->
            <form class="needs-validation" id="AddTaskForm" novalidate>
                <div class="modal-body">
                    <div class="form-group">
                        <div class="col-md-12">
                            <label for="name" class="col-form-label"> Task Name</label>
                            <input type="text" class="form-control" id="task_name" name="task_name" placeholder="Enter Name" required>
                        </div>
                        <div class="invalid-feedback">
                            Please input your task name.
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-12">
                            <label for="taskdescription" class="col-form-label"> Task Description</label>
                            <textarea class="form-control" rows="3" id="task_description" name="task_description" required></textarea>
                        </div>
                        <div class="invalid-feedback">
                            Please input your task description.
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-12">
                            <label for="startdate" class="col-form-label">Start Date</label>
                            <input type="date" class="form-control" id="task_startdate" name="task_startdate" placeholder="Enter StartDate" required>
                        </div>
                        <div class="invalid-feedback">
                            Please input your project task startdate.
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-12">
                            <label for="deadline" class="col-form-label">Deadline</label>
                            <input type="date" class="form-control" id="task_deadline" name="task_deadline" placeholder="Enter Deadline" required>
                        </div>
                        <div class="invalid-feedback">
                            Please input your project task deadline.
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-12">
                            <label for="priority" class="col-form-label">Priority</label>
                            <select id="task_priority" name="task_priority" class="form-control" required>
                                <option selected value="1">Priority 1</option>
                                <option value="2">Priority 2</option>
                                <option value="3">Priority 3</option>
                            </select>
                        </div>
                        <div class="invalid-feedback">
                            Please input your project task priority.
                        </div>
                    </div>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" id="btnClose" class="btn btn-danger" data-dismiss="modal">Close</button>
                    <button type="submit" id="btnSave" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal" id="modalAssignMember">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <h2 class="modal-title">Add Project Member</h2>
            </div>
            <!-- Modal body -->
            <form class="needs-validation" id="AssignMemberForm" novalidate>
                <div class="modal-body">
                    <input type="hidden" id="taskId" name="taskId"/>
                    <div class="form-group">
                        <div class="col-md-12">
                            <label for="name" class="col-form-label"> Project Member</label>
                            <select id="optionmember" name="optionmember" class="form-control" multiple="multiple" style="width: 100%" required>
                                @*<option selected>daniel</option>
                                    <option selected>alfan</option>*@
                            </select>
                        </div>
                        <div class="invalid-feedback">
                            Please input your project member.
                        </div>
                    </div>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" id="btnClose" class="btn btn-danger" data-dismiss="modal">Close</button>
                    <button type="submit" id="btnSave" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section script_user{
    <script>

        $(document).ready(function () {

            Members()
            Modules()

            $('#AddTaskForm').submit(function (e) {
                e.preventDefault()
                AddTask()
            })

            $('#optionmember').select2({
                width: 'resolve',
                theme: 'classic'
            })

            $('#AssignMemberForm').submit(function (e) {
                e.preventDefault()
                AssignMember()
            })

            
            updateChart();

        })

        const updateChart = () => {
            var options = {
                chart: {
                    height: 350,
                    type: 'rangeBar',
                },
                dataLabels: {
                    enabled: false
                },
                series: [

                ],
                title: {
                    text: 'Module Plan Timeline',
                },
                noData: {
                    text: 'No Data'
                },
                plotOptions: {
                    bar: {
                        horizontal: true,
                        distributed: true,
                        dataLabels: {
                            hideOverflowingLabels: false
                        }
                    }
                },
                xaxis: {
                    type: 'datetime'
                },
                yaxis: {
                    show: false
                },
                grid: {
                    row: {
                        colors: ['#f3f4f5', '#fff'],
                        opacity: 1
                    }
                }
            }

            var chart = new ApexCharts(
                document.querySelector("#TaskChart"),
                options
            );

            chart.render();

            $.getJSON('GetTaskChart', function (response) {
                chart.updateSeries([{
                    name: 'Plan Data',
                    data: response
                }])
            });
        }

        //table
        let table = $('#tbl_project_task').DataTable({
            ajax: {
                url: "GetTasks",
                dataSrc: ""
            },
            columns: [
                //No
                {
                    "render": (data, type, row, meta) => {
                        return meta.row + meta.settings._iDisplayStart + 1;
                    }
                },
                //Task Name
                { "data": "taskName" },
                //Start Date
                {
                    "data": "startDate",
                    "render": (startDate) => {
                        let date = moment(startDate)
                        return date.format('DD MMMM YYYY');
                    }
                },
                //Deadline
                {
                    "data": "endDate",
                    "render": (endDate) => {
                        let date = moment(endDate)
                        return date.format('DD MMMM YYYY');
                    }
                },
                //Status
                { "data": "status" },
                //Priority
                { "data" : "priority"},
                //Action
                {
                    'data': 'taskID',
                    "render": function (id) {
                        return `<button type="button" class="btn btn-primary" id="btnAssignMember" style="margin: auto"  data-placement="top" title="Assign Member" onclick="OpenAssignModal(${id})"><i class="fa fa-user-plus" aria-hidden="true"></i></button> | <button class="popup btn btn-warning" data-toggle="tooltip" data-placement="top" title="Delete Task" id="btnDelete" onclick="Delete(${id})"><i class="fa fa-trash"></i></button> | <button class="popup btn btn-danger" data-toggle="tooltip" data-placement="top" title="Mark Task Late" id="btnEdit" onclick="Late(${id})"><i class= "fa fa-flag"></i></button>`;
                    }
                }
            ]
        })

        const Done = () => {
            $.ajax({
                type: "POST",
                url: `MarkModuleFinished`,
                success: (data) => {
                    Swal.fire({
                        text: `Module status changed to "Finished"`,
                        icon: 'success',
                        timer: 10000,
                        timerProgressBar: true
                    });
                    table.ajax.reload()
                },
                error: (data) => {
                    Swal.fire({
                        text: `Error running task`,
                        icon: 'error',
                        timer: 10000,
                        timerProgressBar: true
                    });
                    table.ajax.reload()
                }
            })
        }

        const Late = (id) => {
            $.ajax({
                type: "POST",
                url: `MarkTaskLate/${id}`,
                success: (data) => {
                    Swal.fire({
                        text: `Task status changed to "Late"`,
                        icon: 'success',
                        timer: 10000,
                        timerProgressBar: true
                    });
                    table.ajax.reload()
                    updateChart()
                },
                error: (data) => {
                    Swal.fire({
                        text: `Error running task`,
                        icon: 'error',
                        timer: 10000,
                        timerProgressBar: true
                    });
                    table.ajax.reload()
                }
            })
        }

        const Edit = (id) => {
            Swal.fire({
                text: 'Nothing Happened!',
                icon: 'success',
                timer: 10000,
                timerProgressBar: true
            });
        }

        const Delete = (id) => {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "DELETE",
                        url: `DeleteTask/${id}`,
                        success: () => {
                            Swal.fire(
                                'Deleted!',
                                'Task has been deleted.',
                                'success'
                            )
                            table.ajax.reload()
                            updateChart()
                        },
                        error: () => {
                            Swal.fire(
                                'Failed!',
                                'Error deleting task.',
                                'error'
                            )
                        }
                    })

                }
            })
        }

        const OpenAssignModal = (id) => {
            //let myModal = $('#modalAssignMember')
            $('#taskId').val(id)
            $('#modalAssignMember').modal('show')
        }

        const AssignMember = () => {
            
            let userIds = $('#optionmember').val()
            let taskId = $('#taskId').val()

            
            var users = new Array()

            userIds.forEach((id) => {
                let user = {
                    userID: parseInt(id),
                    taskID: parseInt(taskId)
                }
                users.push(user)
            })


            console.log(JSON.stringify(users));

            $.ajax({
                type: "POST",
                url: "AssignMember",
                data: JSON.stringify(users),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: (data) => {
                    $('#modalAssignMember').modal('hide')
                    if (data == 200) {
                        Swal.fire({
                            text: 'Task Assigned to member!',
                            icon: 'success',
                            timer: 10000,
                            timerProgressBar: true
                        });
                        table.ajax.reload()
                    } else {
                        Swal.fire({
                            text: 'Error assigning task!',
                            icon: 'error',
                            timer: 10000,
                            timerProgressBar: true
                        });
                    }
                },
                error: (data) => {
                    Swal.fire({
                        text: 'Error assigning task!',
                        icon: 'error',
                        timer: 10000,
                        timerProgressBar: true
                    });
                }
            })
        }


        const AddTask = () => {
            let task = {
                TaskName: $('#task_name').val(),
                Description: $('#task_description').val(),
                StartDate: $('#task_startdate').val(),
                EndDate: $('#task_deadline').val(),
                Priority: $('#task_priority').val(),
                Status: "In-Progress"
            }
            console.log(task)
            $.ajax({
                type: "POST",
                url: "AddTask",
                data: task,
                success: (data) => {
                    $('#modalAddTask').modal('hide')
                    if (data == 200) {
                        Swal.fire({
                            text: 'New Task created!',
                            icon: 'success',
                            timer: 10000,
                            timerProgressBar: true
                        });
                        table.ajax.reload()
                        updateChart()
                    } else {
                        Swal.fire({
                            text: 'Error creating task!',
                            icon: 'error',
                            timer: 10000,
                            timerProgressBar: true
                        });
                    }
                },
                error: (data) => {
                    $('#modalAddTask').modal('hide')
                    Swal.fire({
                        text: 'Error creating task!',
                        icon: 'error',
                        timer: 10000,
                        timerProgressBar: true
                    });
                }
            })
        }

        const Members = () => {
            $.ajax({
                type: "GET",
                url: "GetProjectMembers",
                success: (data) => {

                    console.log(data)
                    $('#optionmember').empty()
                    for (let i = 0; i < data.length; i++) {
                        let id = data[i].userID
                        let name = data[i].name

                        $("#optionmember").append("<option value='" + id + "'>" + name + "</option>")
                    }
                }
            })
        }

        const Modules = () => {
            $.ajax({
                type: "GET",
                url: "GetModuleById",
                success: (data) => {

                    console.log(data)

                    let startdate = moment(data.startDate).format('YYYY-MM-DD');
                    let enddate = moment(data.endDate).format('YYYY-MM-DD')
                    $("#task_startdate").attr("min", startdate)
                    $("#task_deadline").attr("min", startdate)
                    $("#task_startdate").attr("max", enddate)
                    $("#task_deadline").attr("max", enddate)
                    //alert(data.startDate + "<->" + data.endDate)
                }
            })
        }

    </script>
}